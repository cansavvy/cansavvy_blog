{
  "hash": "f352e8f14020cf58219ee20ab2f24711",
  "result": {
    "markdown": "---\ntitle: \"Thoughts about Tech Debt\"\nauthor: \"Candace Savonen\"\ndate: \"2023-06-02\"\ncategories: [code, management, documentation]\n---\n\n\n\n\nTech debt isn't all bad. \n\n## Tech debt is the flip side of project health\n\nTechnical debt is generally defined as the accrued cost of using less than optimal solutions now, that you will have to 'pay' for later. \n\nJust as mortgages and school loans and other types of investments are not always bad (but might still feel that way), not all kinds of tech debt are bad. In fact, for discussions like these, its probably best we frame tech debt as the inverse of 'project health'. \n\nIt's unrealistic to write a perfect project. And even if you did, the software environment surrounding that perfect project would still change and eventually render that perfect project into no longer useful. So how do we conduct ourselves in the real world where 'good code' is only one piece of the puzzle? \n\n## Types of tech debt\n\nNot all types of tech debt are the same. Just as thousands of dollars in credit card debt for my Hidden Valley ranch habit should not be equated to me storing money away for my child's education fund. One of these is a good use of money (I'll let you guess which). \n\nTech debt has been categorized by others ([like this article from asana](https://asana.com/resources/technical-debt)) as being of different types: \n\n![Types of Tech Debt](resources/images/tech-debt-types.png)\nFrom this article: \n\n`\nPrudent and deliberate: The decision to ship quickly and deal with the consequences later causes prudent and deliberate debt. This type of debt is most commonly used when the stakes of the product are relatively low, and the benefits of a quick delivery outweigh the risk. \n\nReckless and deliberate: Knowing how to produce the best code but prioritizing speedy delivery over it is the cause of reckless and deliberate debt.\n\nPrudent and inadvertent: Prudent and inadvertent debt happens when there’s a desire to produce the best code, but you find a better solution after implementation. \n\nReckless and inadvertent: Reckless and inadvertent debt occurs when a team tries to produce the best code without the necessary knowledge to do so. The team is often unaware of the mistakes they’re making. \n`\n\nSo sometimes tech debt has its place. Prudent and deliberate can help you reach a deadline in scenarios where the stakes are low. But what about the other kinds of tech debt? Ideally we'd like to minimize those, and that relates to how supportive a development environment is. \n\n## Context, context, context\n\nI have a core belief that people, in general, act accordingly to their context as opposed to intrinsic 'goodness' or 'badness'. In other words most people aren't 'bad apples' but even the 'best apples' will become inedible if you put them in a bowl of worms. \n\nThis applies very much to the workplace. Most people do the best work they can given the context. But some contexts are more supportive and conducive to good work than others. In my own work history, there are some contexts in which I felt I was very well supported and did great work given my skills at the time, and on the flip side, there were other contexts in which I felt my work was not as good as it could have been, not because I didn't care (I cared just as much then as I do know), but that I just didn't have the support or resources to do the work to the same quality it could have been.\n\nIn other words, I think data scientists, developers, and other \"professional\" folks make mistakes when they think that empathy isn't an essential and valuable tool in the workplace. So how do we channel this empathy into creating a supportive work environment? \n\n### Supportive work environments for minimizing less than ideal kinds of tech debt\n\nTo optimize a project's health we need to 1) Understand the goal of the project 2) Be able to implement the project and 3) Have time to do said implementation\n\n1. Understand the goal of the project\n   a. Proper understanding of the problem -- doing groundwork. \n   b. Communicating and listening to the end user\n2. Be able to implement the project\n   a. Support for training opportunities! Investing in young folks! \n   b. Code review!\n   c. Written knowledge/documentation \n   d. Outsource to more knowledgeable people when you can!\n3. Have time to implement the said solutions\n   a. Upfront costs can mean long term gains \n   b. Do not take on more dishes than you can cook! -- you are going to burn yourself or a dish. \n\nIf you are in an environment that can't give you these things, look into leaving to go to a place that can support you to do your best work!\n\n### It always comes back to people\n\nI think at the end of the day, I'm realizing nearly every common work problem seems to root itself in systemic and organizational issues where people and their humanity are depriortized. If we can continually work to support people and their work I think issues of bad types of tech debt, irreproducible research, and other common work issues in data science would improve.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.1.2 (2021-11-01)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Big Sur 10.16\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.0.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] rstudioapi_0.13   knitr_1.43        magrittr_2.0.3    hms_1.1.2        \n [5] R6_2.5.1.9000     rlang_1.1.1       fastmap_1.1.1     fansi_1.0.4      \n [9] tools_4.1.2       xfun_0.39         utf8_1.2.3        cli_3.6.1        \n[13] htmltools_0.5.2   ellipsis_0.3.2    ottrpal_1.0.1     yaml_2.3.7       \n[17] digest_0.6.33     tibble_3.2.1      lifecycle_1.0.3   tzdb_0.3.0       \n[21] readr_2.1.3       htmlwidgets_1.5.4 vctrs_0.6.3       fs_1.6.2         \n[25] glue_1.6.2        evaluate_0.21     rmarkdown_2.20    compiler_4.1.2   \n[29] pillar_1.9.0      jsonlite_1.8.7    pkgconfig_2.0.3  \n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
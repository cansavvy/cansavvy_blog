[
  {
    "objectID": "posts/google-auth/index.html",
    "href": "posts/google-auth/index.html",
    "title": "R package Google Authorization for Dummies",
    "section": "",
    "text": "For quite some time, I’ve always wanted to unlock the powers of using Google API in an R package but the authorization bit had always puzzled me!\nThis is not to say that others have not done a lot of great work in this topic of R packages and Google API! There are a lot of great R packages with documentation out there to help you do this. Three in particular:\nBut it seems like the people who understand it: understand it. And the rest of us are left confused!\nI still didn’t understand how to know what kinds of credentials I needed and I always found myself lost in a lacking the correct permissions loop!\nBut! I figured it out! And I figured this is a good time to write about it."
  },
  {
    "objectID": "posts/google-auth/index.html#background",
    "href": "posts/google-auth/index.html#background",
    "title": "R package Google Authorization for Dummies",
    "section": "Background",
    "text": "Background\nGoogle has a load of different apps that are free, online and useful in a daily project workflow.\nFirst off, what’s an API? It stands for Application Programming Interface. Why am I so excited about having figured this out? APIs are powerful because they allow different computer programs to talk to each other and share information. This means that I (and hopefully you after this blogpost) can use existing tools and features to build new applications faster and more easily. It’s like being able to borrow a tool from a friend instead of having to build it from scratch yourself.\nLet me explain my particular use case:\nI was working on putting a bunch of files on to Google and set them up on Google Classroom. To do this, was very tedious. I had a lot of steps I had to perform for each…and every… individual file.\nThere’s gotta be a better way than all this tedious work!\n\n\n\nvia GIPHY\n\nIf only there was a way I could write a script that could do this all for me at the call of one script! Spoiler alert: There is and I figured it out!\nBut before I could write such a script, I had to be able to get access to the data that is on an Google API, and to do that I needed to figure out authorization.\nAuthorization is just a way to tell an App like Google - hey! It’s me, its okay, you can share this data! People do authorization steps all the time when they use their usernames and passwords to login to things. But usernames and passwords are a simpler form of authorization. And when it comes to APIs, these are often not secure enough to keep all this data safe."
  },
  {
    "objectID": "posts/google-auth/index.html#a-dummys-rundown-on-the-auth-types",
    "href": "posts/google-auth/index.html#a-dummys-rundown-on-the-auth-types",
    "title": "R package Google Authorization for Dummies",
    "section": "A dummy’s rundown on the auth types",
    "text": "A dummy’s rundown on the auth types\nIt’s me! I’m the dummy! The first place that people would always lose me is the authorization types.\n\nBasic Authentication: Basic authentication is a simple authentication method that sends a username and password in plain text with each request to the API. While easy to implement, it is also very insecure because the credentials are sent in plain text and can be intercepted by anyone with access to the network traffic.\nOAuth 2.0: OAuth stands for Open Authorization. It’s an authorization protocol that is widely used by a lot of different websites. The name reflects the fact that the OAuth protocol is designed to provide an open and standardized way for different systems to authorize and authenticate access to protected resources. The 2.0 part just refers to the fact that there was a OAuth 1.0 that is not quite as secure.\nAPI Keys and Personal Access Tokens - these are less secure ways of authorization but more convenient. They are often special strings of characters, symbols and numbers that you can supply to authorize the API to release your data."
  },
  {
    "objectID": "posts/google-auth/index.html#the-goal",
    "href": "posts/google-auth/index.html#the-goal",
    "title": "R package Google Authorization for Dummies",
    "section": "The goal",
    "text": "The goal\nIf you create an app that uses one of these APIs usually you’ll see a kind of authorization screen like this:\n\n\n\n\n\n\n\n\n\nBut what if I’m making the app? How do I make this screen show up so others can use my package to access their own Google data?"
  },
  {
    "objectID": "posts/google-auth/index.html#the-meat-and-potaters",
    "href": "posts/google-auth/index.html#the-meat-and-potaters",
    "title": "R package Google Authorization for Dummies",
    "section": "The meat and potaters",
    "text": "The meat and potaters\nOkay, so how do you create an app that does the authorization thing for a Google API?\n\nStep 1) Make a Google Cloud account\nGo to the Google Developers Console at https://console.developers.google.com/.\nIf you don’t have an account yet, it will tell you. Make an account! It’s free assuming you aren’t doing anything crazy.\n\n\n\n\n\n\n\n\n\n\n\nStep 2) Make a new project\nNow you’ll need to make a project. Go to Select Project in the menu bar.\n\n\n\n\n\n\n\n\n\nClick “New Project.”\n\n\n\n\n\n\n\n\n\nGive your project a name – whatever will remind you of what this is for – and click “Create.”\n\n\n\n\n\n\n\n\n\nYou’ll be in your project’s Dashboard after you create it. You can return here by clicking on this left side menu and going to Cloud Overview > Dashboard (sometimes this left side menu hides but you can click the three lines to bring it back out).\n\n\n\n\n\n\n\n\n\n\n\nStep 3) Enable the API you are looking to use\nFirst you have to enable whatever Google App you want to interact with: Googlesheets, Googledrive, Googleforms, Googleclassroom, etc.\nTo do this go to that left-had menu and go to click APIs & Services and then to Enable APIs & Services.\n\n\n\n\n\n\n\n\n\nOn this page, you need to search for that Google app you want access to. Click on the one you want and then on its page, click Enable.\n\n\n\n\n\n\n\n\n\n\n\nStep 4) Get credentials (OAuth 2.0 kind)\nWe’ve enabled the API, but to really use it we need to have credentials so our package is allowed to interact with the API and we don’t have just any random person accessing our Google data.\nGoogle will probably suggest to you to Create credentials click on this button. But you can also get to the Credentials page by clicking on `Credentials on the left hand side.\n\n\n\n\n\n\n\n\n\nClick on the “Create credentials” button and select “OAuth client ID” or if you aren’t sure you can say Help me choose.\n\n\n\n\n\n\n\n\n\nSelect the Google program that you want to interact with (the one we enabled before). And tell it we would like to collect User data.\n\n\n\n\n\n\n\n\n\nNow we need to supply info for what our OAuth screen that asks the user if they are okay with sending their data to our package. Put the name of your package as you would like users to see it. And put the email they should contact you with any problems with. Then go to the Next step.\n\n\n\n\n\n\n\n\n\nPut a logo if you would like and then add your email here as well.\n\n\n\n\n\n\n\n\n\nNow we have to tell it what scopes we need. Scopes are basically what privileges to what data your package is going to have. If you don’t have the right scopes, your package won’t have permissions to do anything. If you have too many apps, that is unnecessarily dangerous to have more permissions than you need.\nClick Add/Remove scopes.\n\n\n\n\n\n\n\n\n\nSearch first for the API you are looking for. For this example, we will use googlesheets.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThink about what you would like your package to do, and choose the scopes that relate to it. For example, is your package only going to read in a googlesheet but won’t edit it? Then choose a read.only scope that pertains to googlesheets. Read the user-facing Description to get an idea of what each will do. When you look in the Google Reference Guide, the methods pages will list the scopes needed toward the bottom of the page.\nYou can come back to edit these if you need. So don’t worry too much about getting it exactly right, right now.\nThe ones you do choose, be sure to write them down in a scratch file somewhere because you’ll need to know what they were later.\nClick Update when you have the scopes you think you need.\n\n\n\n\n\n\n\n\n\nNow you’ve added the scopes. Go to the next page.\nFor this scenario we will select “Desktop app”. But if you were making a Shiny App you would choose “Web Application.”\n\n\n\n\n\n\n\n\n\nPut a title for these credentials that will remind you want you are using them for.\n\n\n\n\n\n\n\n\n\nNow download these credentials. Be careful with these! You don’t want others to have them so don’t load them to GitHub. (Add the file to your .gitignore).\n\n\n\n\n\n\n\n\n\n\n\nStep 3) What do the credentials look like?\nIt’s a JSON file that has information:\n{\"installed\":\n  {\"client_id\":\"abunchoflettersandnumbershere.apps.googleusercontent.com\",\n   \"project_id\":\"some-words-for-your-projectid\",\n   \"auth_uri\":\"https://accounts.google.com/o/oauth2/auth\",\n   \"token_uri\":\"https://oauth2.googleapis.com/token\",\"auth_provider_x509_cert_url\":\"https://www.googleapis.com/oauth2/v1/certs\",\n   \"client_secret\":\"another-jumble-of-letters-and-numbers-here\",\n   \"redirect_uris\":[\"http://localhost\"]\n   }\n  }\nThe client ID and the client secret are what we are gonna need for our package.\n\n\nStep 4) Using the credentials in an R package\nStart up an R Package. I follow Hadley’s R Package book everytime.\nThere are a lot of ways to have users authorize the app, and perhaps some might be more secure than this. I’m a newb at this.\nHere’s the packages we’ll need:\ninstall.packages(\"httr\") \ninstall.packages(\"gargle\") \ninstall.packages(\"jsonlite\") \nFirst, I’m going to take my credentials and read them in and save them to an RDS. I’m going to bury this RDS in the package and I’m not uploading this code to my repository.\n# Read in the creds\ncreds <- jsonlite::read_json(list.files(path = file.path(root_dir, \".secrets\"), \n                                        pattern = \"client_secret_\", \n                                        full.names = TRUE))\n\n## Save creds to an RDS\nsaveRDS(list(client_id = creds$installed$client_id,\n             client_secret = creds$installed$client_secret),\n        file.path(<some buried file in my package>))\nFirst let’s make a file called auth.R or something like that.\nIn this file, define your scopes that you wrote down when you made the OAuth bits:\nscopes <- c(\n  \"https://www.googleapis.com/auth/spreadsheets\",\n  \"https://www.googleapis.com/auth/spreadsheets.readonly\",\n  \"https://www.googleapis.com/auth/drive\",\n  \"https://www.googleapis.com/auth/drive.readonly\",\n  \"https://www.googleapis.com/auth/drive.file\")\nA couple more terms to define before we get into some more code:\n\nendpoint - its just a URL where the thing we want is located.\ntoken - generally referring to the OAuth token we are going to send Google to get permission to see the things we want to see.\nencyption - a way for us to hide a file from others.\nencryption key - there’s a lot of ways to encrypt, but the way we did it here is called symmetric encryption in that we give it a key we make up when we encrypt the thing and then to decrypt it we have to give it back that same key.\n\nFirst, some token managing bits (note that a lot of this code is adapted or inspired by rgoogleslides).\n# I can tell people to use the authorize_sheets() function when they start up\n.onAttach <- function(libname, pkgname) {\n  packageStartupMessage(\"Use authorize_sheets() function to begin.\")\n}\n\n# I can make an empty environment where the token will be stored when we have it so that its not just out in the open. \n.packageEnv <- new.env(parent = emptyenv())\n\n# For now the Token is gonna be NULL because we don't have it yet. \n.packageEnv$Token <- NULL\n\n# A function to set token to environment\nset_token <- function(value) {\n  .packageEnv$Token <- value\n  return(value)\n}\n\n# A function to retrieveGet token from environment\nget_token <- function() {\n  .packageEnv$Token\n}\nNow for the meat and potaters. This is the function that people will run to actually authorize the package to use their google data.\nauthorize_sheets() <- function(token = NULL, ...) {\n\n  # I stored the credentials as an encrypted RDS\n  # I'm not going to show this bit for security reasons -- but you can figure out your own encryption and security measures. \n  # Look at the openssl package. \n  \n  # If there isn't a token supplied, it will get one from the RDS\n  if (is.null(token)) {\n  \n    # This is a nifty function from gargle to set up our app\n    app <- gargle::oauth_app(\n    \n      appname = \"google-api-r-package\",\n      \n      # These are just strings that are derived from the credentials JSON we downloaded\n      key = <client_id from json/rds> ,\n      secret = <client_secret from json/rds>\n    )\n    \n    # the httr package has the google endpoints\n    endpoint <- httr::oauth_endpoints(\"google\")\n    \n    # Now we put everything all together to make the token\n    token <- httr::oauth2.0_token(\n      endpoint = endpoint, \n      app = app,\n      scope = scopes_list,\n      ...\n    )\n  }\n  \n  # Now the token is set to the environment so we don't have to do this again\n  set_token(token)\n  \n  # Make it invisible for security\n  return(invisible(token))\n}\nNow we should be able to test this!\ndevtools::load_all() \nauthorize_sheets()\nIf running this brings up the authorization screen for you, you’ve probably successfully authorized your package!\nTo test this: here’s what your basic API function would look like.\nWhen building your API wrapper functions, you will heavily depend on the Google API reference guide. In this case, we’d reference the sheets reference guide: https://developers.google.com/sheets/api/guides/concepts\nAlso when people say RESTful it’s referring to that you use these URLs to get stuff from APIs. It includes some actions like:\n\nGET - to collect info from some existing stuff\nPOST to create new stuff\nDELETE to, well, delete stuff\nPATCH - to update existing stuff\n\nThis is what we will use the httr package for. So install that if you don’t have it.\nThat’s the basics.\nNow let’s create a test API wrapper function in a separate file in our R folder.\n\n#' Get Google Sheet properties\n#' @param id ID of the googlesheet as a character string. A google sheet ID can be found in the URL like https://docs.google.com/spreadsheets/d/<sheet-id-is-here>/edit#gid=0\n#'\n#' @importFrom httr config accept_json content\n#' @importFrom jsonlite fromJSON\n#' @importFrom assertthat assert_that is.string\n#'\n#' @export\n#' @example \\dontrun {\n#' \n#' authorize_sheets()\n#'\n#' get_sheet_properties(\"13iMGreQq3myZXCflAWfkpXMlgG8Q1bjp-9iuKGfiQFk/\")\n#'\n#' }\n\nget_sheet_properties <- function(sheet_id) {\n\n  # Make sure this is a string\n  assert_that(is.string(sheet_id))\n\n  # Here's the endpoint URL we found from the documentation here: https://developers.google.com/drive/api/v3/reference/files/get\n  url <- \"https://www.googleapis.com/drive/v3/files/\"\n\n  # Get auth token that was stored when we did `authorize_sheets()`\n  token <- get_token()\n  \n  # We're putting this in a format that the API can take\n  config <- httr::config(token = token)\n\n  # Now we are using that GET REST method. Note we are passing in our token with the config and we are telling it to return a JSON file. \n  result <- httr::GET(url, config = config, accept_json())\n\n  # If something doesn't work, we want to know. \n  if (httr::status_code(result) != 200) {\n    message(\"We didn't get the sheet we tried to get. \")\n    \n    httr::stop_for_status(result)\n  }\n\n  # Extract content\n  result_content <- content(result, \"text\")\n  \n  # Read from the JSON it gave us and make it a list in R\n  result_list <- fromJSON(result_content)\n\n  # Return that list\n  return(result_list)\n}\nGreat! Now if we run this to test:\ndevtools::load_all() \nauthorize_sheets()\nsheet_properties <- get_sheet_properties(\"sheet-id-here\")\nHoly sheet!\n\n\n\nvia GIPHY\n\nHopefully that worked! And hopefully you are off to the races for making your very own API wrapper."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome",
    "section": "",
    "text": "Thanks."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "cansavvy::Candy_Bytes()",
    "section": "",
    "text": "Meetings are like sleep but they are not refreshing\n\n\n\n\n\n\n\nhow we work\n\n\nmanagement\n\n\ndocumentation\n\n\n\n\n\n\n\n\n\n\n\nJul 11, 2023\n\n\nCandace Savonen\n\n\n\n\n\n\n  \n\n\n\n\nThoughts about Tech Debt\n\n\n\n\n\n\n\ncode\n\n\nmanagement\n\n\ndocumentation\n\n\n\n\n\n\n\n\n\n\n\nJun 2, 2023\n\n\nCandace Savonen\n\n\n\n\n\n\n  \n\n\n\n\nTL;DR for Data Science Teaching\n\n\n\n\n\n\n\nteaching\n\n\ndata science\n\n\n\n\n\n\n\n\n\n\n\nMay 31, 2023\n\n\nCandace Savonen\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOn joining (or not joining) the parent cult\n\n\n\n\n\n\n\nfamily\n\n\npersonal\n\n\n\n\n\n\n\n\n\n\n\nApr 26, 2023\n\n\nCandace Savonen\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR package Google Authorization for Dummies\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nApr 19, 2023\n\n\nCandace Savonen\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nApr 16, 2023\n\n\nCandace Savonen\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/google-auth/index.html#troubleshooting-tip",
    "href": "posts/google-auth/index.html#troubleshooting-tip",
    "title": "R package Google Authorization for Dummies",
    "section": "Troubleshooting Tip",
    "text": "Troubleshooting Tip\nOn a lot of the Google API reference pages they have a Try it out thingy. This is super helpful for testing things:\n\n\n\n\n\n\n\n\n\n\nsessionInfo()\n\nR version 4.1.2 (2021-11-01)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Big Sur 10.16\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.0.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] rstudioapi_0.13   knitr_1.40        magrittr_2.0.3    hms_1.1.2        \n [5] R6_2.5.1.9000     rlang_1.1.0       fastmap_1.1.0     fansi_1.0.3      \n [9] httr_1.4.5        stringr_1.4.1     tools_4.1.2       xfun_0.37        \n[13] utf8_1.2.2        cli_3.4.1         htmltools_0.5.2   ellipsis_0.3.2   \n[17] ottrpal_1.0.1     yaml_2.3.5        digest_0.6.29     tibble_3.1.8     \n[21] lifecycle_1.0.3   tzdb_0.3.0        readr_2.1.3       htmlwidgets_1.5.4\n[25] vctrs_0.6.0       fs_1.5.2          curl_5.0.0        glue_1.6.2       \n[29] evaluate_0.17     rmarkdown_2.20    stringi_1.7.8     compiler_4.1.2   \n[33] pillar_1.8.1      jsonlite_1.8.4    pkgconfig_2.0.3"
  },
  {
    "objectID": "posts/to-be-a-parent-or-not/index.html",
    "href": "posts/to-be-a-parent-or-not/index.html",
    "title": "On joining (or not joining) the parent cult",
    "section": "",
    "text": "And now for something completely different. Most of my blog will probably be me writing about technical things. But I started this blog with literally no bounds on the scope of topics. Which means I will now talk about something that’s been on my mind that is more personal.\nI’m at a point in my life where a good chunk of peers (including myself) have drank the kool-aid and decided to have kids. But there’s also a good chunk of my peers that are still debating whether or not they want to have kids.\nI used to think I never wanted kids. And now I do have them and I really love them and the #parent-life. But that being said, I remember a short time ago being in this debate in my head and most people (especially people who are parents) are not very helpful to discuss this with.\nGenerally the conversations have vibes that lean one of two ways.\nOR\nSo in an attempt to help ease the stress of potentially maybe prospective parents (or not going to become parents) here’s some thoughts I’d like to share that I hope are helpful.\nI’ve gathered these thoughts from talking to therapists, other parents, as well as people who are debating whether to become parents. I jotted most of this while having a baby strapped to me on a cross-continental plane ride."
  },
  {
    "objectID": "posts/to-be-a-parent-or-not/index.html#conclusion",
    "href": "posts/to-be-a-parent-or-not/index.html#conclusion",
    "title": "On joining (or not joining) the parent cult",
    "section": "Conclusion",
    "text": "Conclusion\nIn conclusion, I gave you absolutely no helpful determinations on your potential decision but best case scenario maybe you gained an ounce of peace about the whole thing? That’s my hope for you anyway.\nAnd if you’d like to join my kids’ village as a fun Aunt or Uncle, there’s always available job openings for that!\n\n\n\n\n\n\nsessionInfo()\n\nR version 4.1.2 (2021-11-01)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Big Sur 10.16\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.0.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] rstudioapi_0.13   knitr_1.40        magrittr_2.0.3    hms_1.1.2        \n [5] R6_2.5.1.9000     rlang_1.1.0       fastmap_1.1.0     fansi_1.0.3      \n [9] stringr_1.4.1     tools_4.1.2       xfun_0.37         utf8_1.2.2       \n[13] cli_3.4.1         htmltools_0.5.2   ellipsis_0.3.2    ottrpal_1.0.1    \n[17] yaml_2.3.5        digest_0.6.29     tibble_3.1.8      lifecycle_1.0.3  \n[21] tzdb_0.3.0        readr_2.1.3       htmlwidgets_1.5.4 vctrs_0.6.0      \n[25] fs_1.5.2          glue_1.6.2        evaluate_0.17     rmarkdown_2.20   \n[29] stringi_1.7.8     compiler_4.1.2    pillar_1.8.1      jsonlite_1.8.4   \n[33] pkgconfig_2.0.3"
  },
  {
    "objectID": "posts/to-be-a-parent-or-not/index.html#deciding-to-be-a-parent-is-illogical",
    "href": "posts/to-be-a-parent-or-not/index.html#deciding-to-be-a-parent-is-illogical",
    "title": "On joining (or not joining) the parent cult",
    "section": "Deciding to be a parent is illogical",
    "text": "Deciding to be a parent is illogical\n\n\n\n\n\nIt’s not a decision you can make with logic or with a pros and cons list.The “logical” decision in regards to your finances, time, flexibility and stress is always to not have kids. It took me some time to realize this point and it wasn’t comfortable. Logic is often easier to feel comfortable basing a decision on than emotions. But that’s just something our western culture seems to perpetuate and not necessarily true."
  },
  {
    "objectID": "posts/to-be-a-parent-or-not/index.html#there-is-no-wrong-choice",
    "href": "posts/to-be-a-parent-or-not/index.html#there-is-no-wrong-choice",
    "title": "On joining (or not joining) the parent cult",
    "section": "There is no wrong choice",
    "text": "There is no wrong choice\n\n\n\n\n\nKids or no kids you’ll have to learn to be happy. And whatever decision you make will be the right one. So don’t stress about having made the wrong decision. Just focus on adapting and being grateful for the decision you made. FOMO is a waste of emotions regardless of the decision made."
  },
  {
    "objectID": "posts/to-be-a-parent-or-not/index.html#kids-wont-make-you-happier",
    "href": "posts/to-be-a-parent-or-not/index.html#kids-wont-make-you-happier",
    "title": "On joining (or not joining) the parent cult",
    "section": "Kids won’t make you happier",
    "text": "Kids won’t make you happier\n\n\n\n\n\nYou’ll be disappointed if happiness is your motivation. Yes, kids make your best days even better than you imagined!! but they also make your worst days even worse. Kids amplify the extremes of life."
  },
  {
    "objectID": "posts/to-be-a-parent-or-not/index.html#theres-a-lot-of-ways-to-form-families",
    "href": "posts/to-be-a-parent-or-not/index.html#theres-a-lot-of-ways-to-form-families",
    "title": "On joining (or not joining) the parent cult",
    "section": "There’s a lot of ways to form families",
    "text": "There’s a lot of ways to form families\n\n\n\n\n\nIt doesn’t have to be the way you imagined. If you want to have a sense of contributing to the future but aren’t sure about the ‘traditional’ parent route: be a part of someone’s village. There’s lots of kids around who need more than just whatever “traditional” parents they have to help raise and prepare them for the future. The exclusively nuclear family isn’t practical or good for parents or kids. Parents and their kids who don’t have villages are struggling, don’t underestimate the impact you could have as a parent/aunt/uncle figure.\n\nYou can contribute to society (perhaps even more) without being a parent\n\n\n\n\n\nThere’s a lot of great ways you can contribute to society that you can’t do as easily with kids. When you have kids you have to be selfish for them. You are no longer able to help others in the way you want to because you have to prioritize your kids first. So having kids is kind of a selfish act in the sense that you are deciding to pour into them instead of others. Having kids is a time where you should ask for help a lot for the sake of them and that’s okay but it is something to think about.\n\n\nThere’s never a good time\n\n\n\n\n\nKids will overturn your life in both good and bad ways if and when you decide to do it. So never wait for all the stars to align because life won’t do that. Obviously some times might be marginally easier than others but on the scale of things, you’ll adapt and figure it out no matter what.\n\n\nYou’ll be as good at being a parent as anyone is\n\n\n\n\n\nIf you are stressed about whether you’d make a “good parent” you’ll be just fine. The mere fact that you are worried about that means you will do a good job as much as anyone can. Best case scenario you will raise your kids with a marginal amount of hang ups and trauma (people never have 0% trauma because parents are human). If you are motivated to be a good parent then you will be fine by just showing up and doing your best (I am writing this telling this to myself I think). People have kids in all kinds of shitty scenarios and kids are pretty resilient. Your context is probably a lot better than you think."
  },
  {
    "objectID": "posts/to-be-a-parent-or-not/index.html#ignore-toxicity-from-people-who-are-parents",
    "href": "posts/to-be-a-parent-or-not/index.html#ignore-toxicity-from-people-who-are-parents",
    "title": "On joining (or not joining) the parent cult",
    "section": "Ignore toxicity from people who are parents",
    "text": "Ignore toxicity from people who are parents\n\n\n\n\n\nDon’t listen to some traditional parents who are being gatekeepy about the “parent club”. You’re smart and capable and there’s nothing about parenthood that requires some elite or special set of skills. Parents have a tendency to really bitch about parenting work but I frankly enjoy the grind. A lot of people have kids. It is hard but also really fun. If a parent tries to emphasize that it’s all joy or all hell then they aren’t really being realistic. Parents can be kinda toxic and gatekeepy in their “advice” to fellow parents or prospective parents (“you’ll never understand until you have kids” or “just wait…”— and other unhelpful things they say). You can totally do the parent thing if that is what you want."
  },
  {
    "objectID": "posts/to-be-a-parent-or-not/index.html#ignore-toxicity-from-your-own-parents-or-in-laws",
    "href": "posts/to-be-a-parent-or-not/index.html#ignore-toxicity-from-your-own-parents-or-in-laws",
    "title": "On joining (or not joining) the parent cult",
    "section": "Ignore toxicity from your own parents or in-laws",
    "text": "Ignore toxicity from your own parents or in-laws\n\n\n\n\n\nFuck the social pressures to have kids. Don’t have kids because your parents or in-laws want to be grandparents. That’s not enough. Don’t let people make you feel like you are “incomplete” if you have decided not to have kids. That’s toxic. Block that out best you can."
  },
  {
    "objectID": "posts/data-science-teaching/index.html",
    "href": "posts/data-science-teaching/index.html",
    "title": "TL;DR for Data Science Teaching",
    "section": "",
    "text": "Our group has just put out a preprint about data science teaching\nHere’s the TL;DR\n\n\nSummary\n\nData science teaching should be inclusive, motivating, and realistic. Motivating so individuals have the energy to make through steep learning curves, realistic so they are prepared for the data science “real world, and inclusive because data science sorely needs input and perspectives from more than just white straight dudes.\n\nThere are a bunch of practical tips related to these ideals here for download as well as if you’d like to contirbute more ideas!\n\n\n\nThe headlines for data science teaching tips in this paper are:\n\nLearning takes time!\nMistakes are good!\nBe silly in the classroom!\nLearn about barriers and try to break them down\nWork toward a more inclusive classroom\nLone genius isn’t a thing; Teamwork is great!\nBe flexibly prescriptive - there’s a lot of different kinds of projects out there.\nKeep it simple, stupid – we don’t need to learn everything today.\nEncourage curiosity - why do your data look like that?\nGood communication is critical for data science work!\n\nData science teachers are continually learning how to better be there for there students, so we need to keep iteratively updating these tips! Please discuss these with us! What have you learned?\n\nsessionInfo()\n\nR version 4.1.2 (2021-11-01)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Big Sur 10.16\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.0.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] rstudioapi_0.13   knitr_1.42        magrittr_2.0.3    hms_1.1.2        \n [5] R6_2.5.1.9000     rlang_1.1.0       fastmap_1.1.0     fansi_1.0.3      \n [9] tools_4.1.2       xfun_0.39         utf8_1.2.2        cli_3.4.1        \n[13] htmltools_0.5.2   ellipsis_0.3.2    ottrpal_1.0.1     yaml_2.3.5       \n[17] digest_0.6.29     tibble_3.1.8      lifecycle_1.0.3   tzdb_0.3.0       \n[21] readr_2.1.3       htmlwidgets_1.5.4 vctrs_0.6.0       fs_1.5.2         \n[25] glue_1.6.2        evaluate_0.17     rmarkdown_2.20    compiler_4.1.2   \n[29] pillar_1.8.1      jsonlite_1.8.4    pkgconfig_2.0.3"
  },
  {
    "objectID": "posts/tech-debt/index.html",
    "href": "posts/tech-debt/index.html",
    "title": "Thoughts about Tech Debt",
    "section": "",
    "text": "Tech debt isn’t all bad."
  },
  {
    "objectID": "posts/tech-debt/index.html#tech-debt-is-the-flip-side-of-project-health",
    "href": "posts/tech-debt/index.html#tech-debt-is-the-flip-side-of-project-health",
    "title": "Thoughts about Tech Debt",
    "section": "Tech debt is the flip side of project health",
    "text": "Tech debt is the flip side of project health\nTechnical debt is generally defined as the accrued cost of using less than optimal solutions now, that you will have to ‘pay’ for later.\nJust as mortgages and school loans and other types of investments are not always bad (but might still feel that way), not all kinds of tech debt are bad. In fact, for discussions like these, its probably best we frame tech debt as the inverse of ‘project health’.\nIt’s unrealistic to write a perfect project. And even if you did, the software environment surrounding that perfect project would still change and eventually render that perfect project into no longer useful. So how do we conduct ourselves in the real world where ‘good code’ is only one piece of the puzzle?"
  },
  {
    "objectID": "posts/tech-debt/index.html#types-of-tech-debt",
    "href": "posts/tech-debt/index.html#types-of-tech-debt",
    "title": "Thoughts about Tech Debt",
    "section": "Types of tech debt",
    "text": "Types of tech debt\nNot all types of tech debt are the same. Just as thousands of dollars in credit card debt for my Hidden Valley ranch habit should not be equated to me storing money away for my child’s education fund. One of these is a good use of money (I’ll let you guess which).\nTech debt has been categorized by others (like this article from asana) as being of different types:\n From this article:\n` Prudent and deliberate: The decision to ship quickly and deal with the consequences later causes prudent and deliberate debt. This type of debt is most commonly used when the stakes of the product are relatively low, and the benefits of a quick delivery outweigh the risk.\nReckless and deliberate: Knowing how to produce the best code but prioritizing speedy delivery over it is the cause of reckless and deliberate debt.\nPrudent and inadvertent: Prudent and inadvertent debt happens when there’s a desire to produce the best code, but you find a better solution after implementation.\nReckless and inadvertent: Reckless and inadvertent debt occurs when a team tries to produce the best code without the necessary knowledge to do so. The team is often unaware of the mistakes they’re making. `\nSo sometimes tech debt has its place. Prudent and deliberate can help you reach a deadline in scenarios where the stakes are low. But what about the other kinds of tech debt? Ideally we’d like to minimize those, and that relates to how supportive a development environment is."
  },
  {
    "objectID": "posts/tech-debt/index.html#context-context-context",
    "href": "posts/tech-debt/index.html#context-context-context",
    "title": "Thoughts about Tech Debt",
    "section": "Context, context, context",
    "text": "Context, context, context\nI have a core belief that people, in general, act accordingly to their context as opposed to intrinsic ‘goodness’ or ‘badness’. In other words most people aren’t ‘bad apples’ but even the ‘best apples’ will become inedible if you put them in a bowl of worms.\nThis applies very much to the workplace. Most people do the best work they can given the context. But some contexts are more supportive and conducive to good work than others. In my own work history, there are some contexts in which I felt I was very well supported and did great work given my skills at the time, and on the flip side, there were other contexts in which I felt my work was not as good as it could have been, not because I didn’t care (I cared just as much then as I do know), but that I just didn’t have the support or resources to do the work to the same quality it could have been.\nIn other words, I think data scientists, developers, and other “professional” folks make mistakes when they think that empathy isn’t an essential and valuable tool in the workplace. So how do we channel this empathy into creating a supportive work environment?\n\nSupportive work environments for minimizing less than ideal kinds of tech debt\nTo optimize a project’s health we need to 1) Understand the goal of the project 2) Be able to implement the project and 3) Have time to do said implementation\n\nUnderstand the goal of the project\n\nProper understanding of the problem – doing groundwork.\nCommunicating and listening to the end user\n\nBe able to implement the project\n\nSupport for training opportunities! Investing in young folks!\nCode review!\nWritten knowledge/documentation\nOutsource to more knowledgeable people when you can!\n\nHave time to implement the said solutions\n\nUpfront costs can mean long term gains\nDo not take on more dishes than you can cook! – you are going to burn yourself or a dish.\n\n\nIf you are in an environment that can’t give you these things, look into leaving to go to a place that can support you to do your best work!\n\n\nIt always comes back to people\nI think at the end of the day, I’m realizing nearly every common work problem seems to root itself in systemic and organizational issues where people and their humanity are depriortized. If we can continually work to support people and their work I think issues of bad types of tech debt, irreproducible research, and other common work issues in data science would improve.\n\nsessionInfo()\n\nR version 4.1.2 (2021-11-01)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Big Sur 10.16\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.0.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] rstudioapi_0.13   knitr_1.43        magrittr_2.0.3    hms_1.1.2        \n [5] R6_2.5.1.9000     rlang_1.1.1       fastmap_1.1.1     fansi_1.0.4      \n [9] tools_4.1.2       xfun_0.39         utf8_1.2.3        cli_3.6.1        \n[13] htmltools_0.5.2   ellipsis_0.3.2    ottrpal_1.0.1     yaml_2.3.7       \n[17] digest_0.6.33     tibble_3.2.1      lifecycle_1.0.3   tzdb_0.3.0       \n[21] readr_2.1.3       htmlwidgets_1.5.4 vctrs_0.6.3       fs_1.6.2         \n[25] glue_1.6.2        evaluate_0.21     rmarkdown_2.20    compiler_4.1.2   \n[29] pillar_1.9.0      jsonlite_1.8.7    pkgconfig_2.0.3"
  },
  {
    "objectID": "posts/meeting-pressure/index.html",
    "href": "posts/meeting-pressure/index.html",
    "title": "Meetings are like sleep but they are not refreshing",
    "section": "",
    "text": "Sleep is great. As a mom of 2 kinds under the age of 2, I can tell you I really miss sleep sometimes. At this stage in my life, I have no trouble taking naps if given the opportunity.\nSleep research people talk our need for sleep using a concept called “sleep pressure.” Basically you need to be tired enough to actually make sleep refreshing and worth your while.\n\n\n\nSleep Pressure\n\n\nFrom the CDC:\nPressure for sleep builds up in our body as our time awake increases. The pressure gets stronger the longer we stay awake and decreases during sleep, reaching a low after a full night of good-quality sleep. The homeostatic process begins to build again after we awaken. The dashed line represents potential increases in pressure to sleep, which will continue to build if sleep does not occur.\nWhat does this have to do with meetings?\nIn our work life, I think we should start thinking of meetings for projects like sleep. We need to have them often enough so that things don’t get out of control. But if we having meetings too often, we will end up feeling like we are in a fog.\n Hence I want to introduce the term “meeting pressure” TM :D\nProperly managing “meeting pressure” means we want to avoid two scenarios:\n\n“We dropped the ball” - uh oh we didn’t meet enough (or the more likely case of our meetings weren’t focused) and we dropped the ball on something due to ineffective communication.\n“This could have been an email” - We’re wasting people’s precious time when really we didn’t have enough meeting pressure to begin with to warrant a meeting. Instead we should have used asynchronous communication (caffeine if you will) to delay us to the point where a meeting would have been more necessary and productive.\n\n\nOther folks out there may have better ideas and more experience to how to manage “meeting pressure” more effectively but here’s some things I think should be utilize more often:\n\nUse the dickens out of asynchronous communication. I am a real fan of doing things asynchronously whenever possible. It allow people to have time for focused work but still allows communication to occur. This does require a bit of team adaption for this to work. And notably not all teams and their goals are suitable for making things asynchronous.\nEach individual on the team needs to keep track of their own tasks with a good task management system so that meetings are less often spent rehashing what needs to be done (because hopefully people already know and remember because their task management system reminded them).\nCancel a meeting if there isn’t enough updates!\nOr don’t make recurring meetings in the first place if possible. Perhaps use Calendly to just have meetings scheduled on an “as needed” basis (this is a strategy that is easier for groups of smaller numbers).\nTry to keep meetings on task by using an agenda and writing things down as people report them. My really big disclaimer for this point is that I also know that for remote work people “water cooler talk time” is also important. So this point needs to be balanced too. Humans still need connection and are not robots who only talk business.\n\nMy huge disclaimer here is 1) I’m coming from my own project experience which is generally revolving around making data science training materials or software development. Meeting pressure management strategies are totally dependent on the teams and the goals that they have. This isn’t one size fits all.\nI’d love to hear other people’s thoughts on this. What do you think about your various groups’ “meeting pressure” management? What do you find works well for your team? Or what doesn’t?\n\nsessionInfo()\n\nR version 4.1.2 (2021-11-01)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Big Sur 10.16\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.0.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] rstudioapi_0.13   knitr_1.43        magrittr_2.0.3    hms_1.1.2        \n [5] R6_2.5.1.9000     rlang_1.1.1       fastmap_1.1.1     fansi_1.0.4      \n [9] tools_4.1.2       xfun_0.39         utf8_1.2.3        cli_3.6.1        \n[13] htmltools_0.5.2   ellipsis_0.3.2    ottrpal_1.0.1     yaml_2.3.7       \n[17] digest_0.6.33     tibble_3.2.1      lifecycle_1.0.3   tzdb_0.3.0       \n[21] readr_2.1.3       htmlwidgets_1.5.4 vctrs_0.6.3       fs_1.6.2         \n[25] glue_1.6.2        evaluate_0.21     rmarkdown_2.20    compiler_4.1.2   \n[29] pillar_1.9.0      jsonlite_1.8.7    pkgconfig_2.0.3"
  }
]
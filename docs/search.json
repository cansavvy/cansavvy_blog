[
  {
    "objectID": "posts/google-auth/index.html",
    "href": "posts/google-auth/index.html",
    "title": "Google Authorization for Dummies",
    "section": "",
    "text": "For quite some time, I’ve always wanted to unlock the powers of using Google API in an R package but the authorization bit had always puzzled me!\nThis is not to say that others have done a lot of great work in this topic of R packages and Google API! There are a lot of great R packages with documentation out there to help you do this. Two in particular:\nBut it seems like the people who understand it: understand it. And the rest of us are left confused!\nI still didn’t understand how to know what kinds of credentials I needed and I always found myself lost in a lacking the correct permissions loop!\nBut! I figured it out! And I figured this is a good time to write about it."
  },
  {
    "objectID": "posts/google-auth/index.html#background",
    "href": "posts/google-auth/index.html#background",
    "title": "Google Authorization for Dummies",
    "section": "Background",
    "text": "Background\nGoogle has a load of different apps that are free, online and useful in a daily project workflow.\nFirst off, what’s an API? It stands for Application Programming Interface. Why am I so excited about having figured this out? APIs are powerful because they allow different computer programs to talk to each other and share information. This means that I (and hopefully you after this blogpost) can use existing tools and features to build new applications faster and more easily. It’s like being able to borrow a tool from a friend instead of having to build it from scratch yourself.\nLet me explain my particular use case:\nI was working on putting a bunch of files on to Google and set them up on Google Classroom. To do this, was very tedious. I had a lot of steps I had to perform for each…and every… individual file.\nThere’s gotta be a better way than all this tedious work!\n\n\n\nvia GIPHY\n\nIf only there was a way I could write a script that could do this all for me at the call of one script! Spoiler alert: There is and I figured it out!\nBut before I could write such a script, I had to be able to get access to the data that is on an Google API, and to do that I needed to figure out authorization.\nAuthorization is just a way to tell an App like Google - hey! It’s me, its okay, you can share this data! People do authorization steps all the time when they use their usernames and passwords to login to things. But usernames and passwords are a simpler form of authorization. And when it comes to APIs, these are often not secure enough to keep all this data safe."
  },
  {
    "objectID": "posts/google-auth/index.html#a-dummys-rundown-on-the-auth-types",
    "href": "posts/google-auth/index.html#a-dummys-rundown-on-the-auth-types",
    "title": "Google Authorization for Dummies",
    "section": "A dummy’s rundown on the auth types",
    "text": "A dummy’s rundown on the auth types\nIt’s me! I’m the dummy! The first place that people would always lose me is the authorization types.\n\nBasic Authentication: Basic authentication is a simple authentication method that sends a username and password in plain text with each request to the API. While easy to implement, it is also very insecure because the credentials are sent in plain text and can be intercepted by anyone with access to the network traffic.\nOAuth 2.0: OAuth stands for Open Authorization. It’s an authorization protocol that is widely used by a lot of different websites. The name reflects the fact that the OAuth protocol is designed to provide an open and standardized way for different systems to authorize and authenticate access to protected resources. The 2.0 part just refers to the fact that there was a OAuth 1.0 that is not quite as secure.\nAPI Keys and Personal Access Tokens - these are less secure ways of authorization but more convenient. They are often special strings of characters, symbols and numbers that you can supply to authorize the API to release your data."
  },
  {
    "objectID": "posts/google-auth/index.html#the-goal",
    "href": "posts/google-auth/index.html#the-goal",
    "title": "Google Authorization for Dummies",
    "section": "The goal",
    "text": "The goal\nIf you create an app that uses one of these APIs usually you’ll see a kind of authorization screen like this:\n\n\n\n\n\n\n\n\n\nBut what if I’m making the app? How do I make this screen show up so others can use my package to access their own Google data?"
  },
  {
    "objectID": "posts/google-auth/index.html#the-meat-and-potaters",
    "href": "posts/google-auth/index.html#the-meat-and-potaters",
    "title": "Google Authorization for Dummies",
    "section": "The meat and potaters",
    "text": "The meat and potaters\nOkay, so how do you create an app that does the authorization thing for a Google API?\n\nStep 1) Make a Google Cloud account\nGo to the Google Developers Console at https://console.developers.google.com/.\nIf you don’t have an account yet, it will tell you. Make an account! It’s free assuming you aren’t doing anything crazy.\n\n\n\n\n\n\n\n\n\n\n\nStep 2) Make a new project\nNow you’ll need to make a project. Go to Select Project in the menu bar.\n\n\n\n\n\n\n\n\n\nClick “New Project.”\n\n\n\n\n\n\n\n\n\nGive your project a name – whatever will remind you of what this is for – and click “Create.”\n\n\n\n\n\n\n\n\n\nYou’ll be in your project’s Dashboard after you create it. You can return here by clicking on this left side menu and going to Cloud Overview > Dashboard (sometimes this left side menu hides but you can click the three lines to bring it back out).\n\n\n\n\n\n\n\n\n\n\n\nStep 3) Enable the API you are looking to use\nFirst you have to enable whatever Google App you want to interact with: Googlesheets, Googledrive, Googleforms, Googleclassroom, etc.\nTo do this go to that left-had menu and go to click APIs & Services and then to Enable APIs & Services.\n\n\n\n\n\n\n\n\n\nOn this page, you need to search for that Google app you want access to. Click on the one you want and then on its page, click Enable.\n\n\n\n\n\n\n\n\n\n\n\nStep 4) Get credentials (OAuth 2.0 kind)\nWe’ve enabled the API, but to really use it we need to have credentials so our package is allowed to interact with the API and we don’t have just any random person accessing our Google data.\nGoogle will probably suggest to you to Create credentials click on this button. But you can also get to the Credentials page by clicking on `Credentials on the left hand side.\n\n\n\n\n\n\n\n\n\nClick on the “Create credentials” button and select “OAuth client ID” or if you aren’t sure you can say Help me choose.\n\n\n\n\n\n\n\n\n\nSelect the Google program that you want to interact with (the one we enabled before). And tell it we would like to collect User data.\n\n\n\n\n\n\n\n\n\nNow we need to supply info for what our OAuth screen that asks the user if they are okay with sending their data to our package. Put the name of your package as you would like users to see it. And put the email they should contact you with any problems with. Then go to the Next step.\n\n\n\n\n\n\n\n\n\nPut a logo if you would like and then add your email here as well.\n\n\n\n\n\n\n\n\n\nNow we have to tell it what scopes we need. Scopes are basically what privileges to what data your package is going to have. If you don’t have the right scopes, your package won’t have permissions to do anything. If you have too many apps, that is unnecessarily dangerous to have more permissions than you need.\nClick Add/Remove scopes.\n\n\n\n\n\n\n\n\n\nSearch first for the API you are looking for. For this example, we will use googlesheets.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThink about what you would like your package to do, and choose the scopes that relate to it. For example, is your package only going to read in a googlesheet but won’t edit it? Then choose a read.only scope that pertains to googlesheets. Read the user-facing Description to get an idea of what each will do. When you look in the Google Reference Guide, the methods pages will list the scopes needed toward the bottom of the page.\nYou can come back to edit these if you need. So don’t worry too much about getting it exactly right, right now.\nThe ones you do choose, be sure to write them down in a scratch file somewhere because you’ll need to know what they were later.\nClick Update when you have the scopes you think you need.\n\n\n\n\n\n\n\n\n\nNow you’ve added the scopes. Go to the next page.\nFor this scenario we will select “Desktop app”. But if you were making a Shiny App you would choose “Web Application.”\n\n\n\n\n\n\n\n\n\nPut a title for these credentials that will remind you want you are using them for.\n\n\n\n\n\n\n\n\n\nNow download these credentials. Be careful with these! You don’t want others to have them so don’t load them to GitHub. (Add the file to your .gitignore).\n\n\n\n\n\n\n\n\n\n\n\nStep 3) What do the credentials look like?\nIt’s a JSON file that has information:\n{\"installed\":\n  {\"client_id\":\"abunchoflettersandnumbershere.apps.googleusercontent.com\",\n   \"project_id\":\"some-words-for-your-projectid\",\n   \"auth_uri\":\"https://accounts.google.com/o/oauth2/auth\",\n   \"token_uri\":\"https://oauth2.googleapis.com/token\",\"auth_provider_x509_cert_url\":\"https://www.googleapis.com/oauth2/v1/certs\",\n   \"client_secret\":\"another-jumble-of-letters-and-numbers-here\",\n   \"redirect_uris\":[\"http://localhost\"]\n   }\n  }\nThe client ID and the client secret are what we are gonna need for our package.\n\n\nStep 4) Using the credentials in an R package\nStart up an R Package. I follow Hadley’s R Package book everytime.\nThere are a lot of ways to have users authorize the app, and perhaps some might be more secure than this. I’m a newb at this.\nHere’s the packages we’ll need:\ninstall.packages(\"httr\") \ninstall.packages(\"gargle\") \ninstall.packages(\"jsonlite\") \nFirst, I’m going to take my credentials and read them in and save them to an RDS. I’m going to bury this RDS in the package and I’m not uploading this code to my repository.\n# Read in the creds\ncreds <- jsonlite::read_json(list.files(path = file.path(root_dir, \".secrets\"), \n                                        pattern = \"client_secret_\", \n                                        full.names = TRUE))\n\n## Save creds to an RDS\nsaveRDS(list(client_id = creds$installed$client_id,\n             client_secret = creds$installed$client_secret),\n        file.path(<some buried file in my package>))\nFirst let’s make a file called auth.R or something like that.\nIn this file, define your scopes that you wrote down when you made the OAuth bits:\nscopes <- c(\n  \"https://www.googleapis.com/auth/spreadsheets\",\n  \"https://www.googleapis.com/auth/spreadsheets.readonly\",\n  \"https://www.googleapis.com/auth/drive\",\n  \"https://www.googleapis.com/auth/drive.readonly\",\n  \"https://www.googleapis.com/auth/drive.file\")\nA couple more terms to define before we get into some more code:\n\nendpoint - its just a URL where the thing we want is located.\ntoken - generally referring to the OAuth token we are going to send Google to get permission to see the things we want to see.\nencyption - a way for us to hide a file from others.\nencryption key - there’s a lot of ways to encrypt, but the way we did it here is called symmetric encryption in that we give it a key we make up when we encrypt the thing and then to decrypt it we have to give it back that same key.\n\nFirst, some token managing bits (note that a lot of this code is adapted or inspired by rgoogleslides).\n# I can tell people to use the authorize_sheets() function when they start up\n.onAttach <- function(libname, pkgname) {\n  packageStartupMessage(\"Use authorize_sheets() function to begin.\")\n}\n\n# I can make an empty environment where the token will be stored when we have it so that its not just out in the open. \n.packageEnv <- new.env(parent = emptyenv())\n\n# For now the Token is gonna be NULL because we don't have it yet. \n.packageEnv$Token <- NULL\n\n# A function to set token to environment\nset_token <- function(value) {\n  .packageEnv$Token <- value\n  return(value)\n}\n\n# A function to retrieveGet token from environment\nget_token <- function() {\n  .packageEnv$Token\n}\nNow for the meat and potaters. This is the function that people will run to actually authorize the package to use their google data.\nauthorize_sheets() <- function(token = NULL, ...) {\n\n  # I stored the credentials as an encrypted RDS\n  # I'm not going to show this bit for security reasons -- but you can figure out your own encryption and security measures. \n  # Look at the openssl package. \n  \n  # If there isn't a token supplied, it will get one from the RDS\n  if (is.null(token)) {\n  \n    # This is a nifty function from gargle to set up our app\n    app <- gargle::oauth_app(\n    \n      appname = \"google-api-r-package\",\n      \n      # These are just strings that are derived from the credentials JSON we downloaded\n      key = <client_id from json/rds> ,\n      secret = <client_secret from json/rds>\n    )\n    \n    # the httr package has the google endpoints\n    endpoint <- httr::oauth_endpoints(\"google\")\n    \n    # Now we put everything all together to make the token\n    token <- httr::oauth2.0_token(\n      endpoint = endpoint, \n      app = app,\n      scope = scopes_list,\n      ...\n    )\n  }\n  \n  # Now the token is set to the environment so we don't have to do this again\n  set_token(token)\n  \n  # Make it invisible for security\n  return(invisible(token))\n}\nNow we should be able to test this!\ndevtools::load_all() \nauthorize_sheets()\nIf running this brings up the authorization screen for you, you’ve probably successfully authorized your package!\nTo test this: here’s what your basic API function would look like.\nWhen building your API wrapper functions, you will heavily depend on the Google API reference guide. In this case, we’d reference the sheets reference guide: https://developers.google.com/sheets/api/guides/concepts\nAlso when people say RESTful it’s referring to that you use these URLs to get stuff from APIs. It includes some actions like:\n\nGET - to collect info from some existing stuff\nPOST to create new stuff\nDELETE to, well, delete stuff\nPATCH - to update existing stuff\n\nThis is what we will use the httr package for. So install that if you don’t have it.\nThat’s the basics.\nNow let’s create a test API wrapper function in a separate file in our R folder.\n#' Get Google Sheet properties\n#' @param id ID of the googlesheet as a character string. A google sheet ID can be found in the URL like https://docs.google.com/spreadsheets/d/<sheet-id-is-here>/edit#gid=0\n#'\n#' @importFrom httr config accept_json content\n#' @importFrom jsonlite fromJSON\n#' @importFrom assertthat assert_that is.string\n#'\n#' @export\n#' @example \\dontrun {\n#' \n#' authorize_sheets()\n#'\n#' get_sheet_properties(\"13iMGreQq3myZXCflAWfkpXMlgG8Q1bjp-9iuKGfiQFk/\")\n#'\n#' }\n\nget_sheet_properties <- function(sheet_id) {\n\n  # Make sure this is a string\n  assert_that(is.string(sheet_id))\n\n  # Here's the endpoint URL we found from the documentation here: https://developers.google.com/drive/api/v3/reference/files/get\n  url <- \"https://www.googleapis.com/drive/v3/files/\"\n\n  # Get auth token that was stored when we did `authorize_sheets()`\n  token <- get_token()\n  \n  # We're putting this in a format that the API can take\n  config <- httr::config(token = token)\n\n  # Now we are using that GET REST method. Note we are passing in our token with the config and we are telling it to return a JSON file. \n  result <- httr::GET(url, config = config, accept_json())\n\n  # If something doesn't work, we want to know. \n  if (httr::status_code(result) != 200) {\n    message(\"We didn't get the sheet we tried to get. \")\n    \n    httr::stop_for_status(result)\n  }\n\n  # Extract content\n  result_content <- content(result, \"text\")\n  \n  # Read from the JSON it gave us and make it a list in R\n  result_list <- fromJSON(result_content)\n\n  # Return that list\n  return(result_list)\n}\nGreat! Now if we run this to test:\ndevtools::load_all() \nauthorize_sheets()\nsheet_properties <- get_sheet_properties(\"sheet-id-here\")\nHoly sheet!\nHopefully that worked! And hopefully you are off to the races for making your very own API wrapper."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome",
    "section": "",
    "text": "Thanks."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Candy bytes",
    "section": "",
    "text": "Google Authorization for Dummies\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nApr 19, 2023\n\n\nCandace Savonen\n\n\n\n\n\n\n\n\nWelcome\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nApr 16, 2023\n\n\nCandace Savonen\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/google-auth/index.html#troubleshooting-tip",
    "href": "posts/google-auth/index.html#troubleshooting-tip",
    "title": "Google Authorization for Dummies",
    "section": "Troubleshooting Tip",
    "text": "Troubleshooting Tip\nOn a lot of the Google API reference pages they have a Try it out thingy. This is super helpful for testing things:\n\n\n\n\n\n\n\n\n\n\nsessionInfo()\n\nR version 4.1.2 (2021-11-01)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Big Sur 10.16\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.0.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] rstudioapi_0.13   knitr_1.40        magrittr_2.0.3    hms_1.1.2        \n [5] R6_2.5.1.9000     rlang_1.1.0       fastmap_1.1.0     fansi_1.0.3      \n [9] httr_1.4.5        stringr_1.4.1     tools_4.1.2       xfun_0.37        \n[13] utf8_1.2.2        cli_3.4.1         htmltools_0.5.2   ellipsis_0.3.2   \n[17] ottrpal_1.0.1     yaml_2.3.5        digest_0.6.29     tibble_3.1.8     \n[21] lifecycle_1.0.3   tzdb_0.3.0        readr_2.1.3       htmlwidgets_1.5.4\n[25] vctrs_0.6.0       fs_1.5.2          curl_5.0.0        glue_1.6.2       \n[29] evaluate_0.17     rmarkdown_2.20    stringi_1.7.8     compiler_4.1.2   \n[33] pillar_1.8.1      jsonlite_1.8.4    pkgconfig_2.0.3"
  }
]
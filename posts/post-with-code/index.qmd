---
title: "Google Authorization for Dummies"
author: "Candace Savonen"
date: "2023-04-19"
categories: [code, analysis]
---


For quite some time, I've always wanted to unlock the powers of using Google API in an R package but the authorization bit had always puzzled me! 

This is not to say that others have done a lot of great work in this topic of R packages and Google API! There are a lot of great R packages with documentation out there to help you do this. Two in particular: 

- [How to get your own API credentials](https://gargle.r-lib.org/articles/get-api-credentials.html)
- [googleAuthR](https://code.markedmondson.me/googleAuthR/)

But it seems like the people who understand it: understand it. And the rest of us are left confused!

I still didn't understand how to know what kinds of credentials I needed and I always found myself lost in a lacking the correct permissions loop! 

But! I figured it out! And I figured this is a good time to write about it. 

## Background 

Google has a load of different apps that are free, online and useful in a daily project workflow. 

First off, what's an API? It stands for `Application Programming Interface`. Why am I so excited about having figured this out? APIs are powerful because they allow different computer programs to talk to each other and share information. This means that I (and hopefully you after this blogpost) can use existing tools and features to build new applications faster and more easily. It's like being able to borrow a tool from a friend instead of having to build it from scratch yourself. 

Let me explain my particular use case: 

I was working on putting a bunch of files on to Google and set them up on Google Classroom. To do this, was very tedious. I had a lot of steps I had to perform for each...and every... individual file. If only there was a way I could write a script that could do this all for me at the call of one script! (There is and I figured it out!)

But before I could write such a script, I had to be able to get access to the data that is on an Google API, and to do that I needed to figure out authorization. 

Authorization is just a way to tell an App like Google - hey! It's me, its okay, you can share this data! People do authorization steps all the time when they use their usernames and passwords to login to things. But usernames and passwords are a simpler form of authorization. And when it comes to APIs, these are often not secure enough to keep all this data safe. 

## A dummy's rundown on the auth types

It's me! I'm the dummy! The first place that people would always lose me is the authorization types. 

- `Basic Authentication`: Basic authentication is a simple authentication method that sends a username and password in plain text with each request to the API. While easy to implement, it is also very insecure because the credentials are sent in plain text and can be intercepted by anyone with access to the network traffic.

- `OAuth 2.0`: OAuth stands for `Open Authorization`. It's an authorization protocol that is widely used by a lot of different websites. The name reflects the fact that the OAuth protocol is designed to provide an open and standardized way for different systems to authorize and authenticate access to protected resources. The 2.0 part just refers to the fact that there was a OAuth 1.0 that is not quite as secure. 

- `API Keys` and `Personal Access Tokens` - these are less secure ways of authorization but more convenient. They are often special strings of characters, symbols and numbers that you can supply to authorize the API to release your data. 

## The goal 

If you create an app that uses one of these APIs usually you'll see a kind of authorization screen like this: 

But what if I'm making the app? How do I make this screen show up so others can use my package to access their own Google data? 

## The meat and potaters

Okay, so how do you create an app that does the authorization thing for a Google API? 

### Step 1) Make a Google Cloud account

Go to https://console.cloud.google.com/ and login with your Google account. 

Go to the Google Developers Console at https://console.developers.google.com/.

### Step 2) Make a new project 

Create a new project by clicking on the dropdown menu in the top left corner of the screen and selecting "New Project."

Give your project a name and click "Create."

In the left-hand menu, click on "Credentials."

Click on the "Create credentials" button and select "OAuth client ID."

Select "Desktop app" or "Other non-UI (e.g. cron job, daemon)" as the application type, depending on your use case.

Enter a name for your OAuth client.

Under "Authorized redirect URIs," leave the field blank.

Click "Create."

Google will generate a client ID and a client secret for you. Copy these values to a safe location.

### Using the credentials in an R package 

Make an R package 

Open RStudio 

Use the client ID and client secret to authenticate your application and generate an access token. This will typically involve sending an HTTP request to Google's OAuth 2.0 server with your client ID and secret, along with the appropriate grant type and scope parameters. Google will respond with an access token, which you can then use to make authorized requests to the Google API.

Note that for security reasons, you should always keep your client secret secret and never expose it in your code or in any publicly accessible location. Instead, you should use a secure method of storing the secret, such as environment variables or a secure key store.

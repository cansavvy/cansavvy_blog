{
  "hash": "4b44989de8ca412b399f807928199838",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Impactful Scientific Software Engineering\"\nauthor: \"Candace Savonen\"\ndate: \"2023-11-13\"\ncategories: [data science, informatics, research]\n\n---\n\n\n\n\n**UNDER DEVELOPMENT** \n\nCreating software for specific biological fields in the academic research setting requires a unique set of skills. In this blog I've summarized these skill sets into three areas. \n\n![](resources/images/swe.png)\n\n\n- **Scientific Validity** - Software data handling and methods need to be congruent and effective for the scientific questions at hand. This requires biomedical knowledge to enforce. Scientific validity is ensured through the use of effective multidisciplinary collaboration, robust scientific code review through pull requests, and robust record keeping of quality controls and sanity checks data analyses.\n  - Multidisciplinary communication is necessary \n  - Clear communication is necessary \n  - Scientific code review is necessary\n\n- **Community Usability** -  Scientific software needs to be usable by the community in order to impact research. Usability is fundamentally increased through making work open source and transparent with a permissive license for reuse. Principles of usability and effective documentation are required so that the intended audience of researchers are able to find the information they need easily to apply the software to their own work.\n  - Power of three - you mostly need just three testers to see what the problems are\n  - Training as a usability tool - Most academic software isn't documented enough for others to understand or use. \n\n- **Sustainability** - Scientific software cannot be impactful if it is not lasting. In an academic research setting, software sustainability can be particularly tricky if not properly funded or if the engineer doesnâ€™t require the proper skill set. Software is made more sustainable through unit testing and continuous integration and continuous deployment methods which ensure that new changes to the code do not break current features. Containerization is a critical tool for software sustainability as irreconcilable software dependencies can easily derail a biological data analysis before it has even begun. Lastly a technique for sustainability is to make sure others on the team are properly trained in these techniques. \n  - CI/CD - Using this will help you test your software when you are a small or large team. \n  - Containerization - using this will help provide snapshots of computing environments you need\n  - Commensalistic symbiotic software - borrowing bigger, more robust software to be your back end, even if it doesn't fully fit your needs. This can be helpful for maintenance burdens for small teams. \n- Training as a software sustainability tool\n\n<br> \n<script src=\"https://utteranc.es/client.js\"\n        repo=\"cansavvy/cansavvy_blog\"\n        issue-term=\"title\"\n        label=\"Commenter on blog post\"\n        theme=\"boxy-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.0 (2024-04-24)\nPlatform: x86_64-apple-darwin20\nRunning under: macOS 15.0.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] vctrs_0.6.5       httr_1.4.7        cli_3.6.3         knitr_1.49       \n [5] rlang_1.1.4       xfun_0.49         jsonlite_1.8.9    glue_1.8.0       \n [9] openssl_2.2.2     askpass_1.2.1     htmltools_0.5.8.1 hms_1.1.3        \n[13] fansi_1.0.6       rmarkdown_2.29    evaluate_1.0.1    tibble_3.2.1     \n[17] tzdb_0.4.0        fastmap_1.2.0     yaml_2.3.10       lifecycle_1.0.4  \n[21] compiler_4.4.0    ottrpal_1.2.1     fs_1.6.5          htmlwidgets_1.6.4\n[25] pkgconfig_2.0.3   rstudioapi_0.17.1 digest_0.6.37     R6_2.5.1         \n[29] utf8_1.2.4        readr_2.1.5       pillar_1.9.0      magrittr_2.0.3   \n[33] tools_4.4.0       xml2_1.3.6       \n```\n\n\n:::\n:::\n\n\n<!-- Google tag (gtag.js) -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-WH33677NQV\"></script>\n<script>\n  window.dataLayer = window.dataLayer || [];\n  function gtag(){dataLayer.push(arguments);}\n  gtag('js', new Date());\n\n  gtag('config', 'G-WH33677NQV');\n</script>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}